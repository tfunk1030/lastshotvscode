// ==========================================
// wind-calculations.js
// Description: Core wind effect calculations
// ==========================================

/**
 * Calculate wind effect on shot distance and direction
 * @param {number} windSpeed - Wind speed in mph
 * @param {number} windDirection - Wind direction in degrees
 * @param {number} shotDistance - Shot distance in yards
 * @param {number} shotHeight - Maximum shot height in yards
 * @returns {Object} Distance and lateral effects
 */
export function calculateWindEffect(windSpeed, windDirection, shotDistance, shotHeight) {
    // Input validation
    if (typeof windSpeed !== 'number' || isNaN(windSpeed)) {
        throw new Error('Wind speed must be a valid number');
    }
    if (windSpeed < 0) {
        throw new Error('Wind speed must be non-negative');
    }
    if (typeof windDirection !== 'number' || isNaN(windDirection)) {
        throw new Error('Wind direction must be a valid number');
    }
    if (windDirection < 0 || windDirection > 360) {
        throw new Error('Wind direction must be between 0 and 360 degrees');
    }

    // Calculate wind components
    const radians = windDirection * Math.PI / 180;
    const headwind = windSpeed * Math.cos(radians);
    const crosswind = windSpeed * Math.sin(radians);

    // Height factor affects wind impact
    const heightFactor = Math.min(1.5, Math.max(0.5, shotHeight / 30));

    // Calculate effects with adjusted coefficients
    const distance = -headwind * 0.009 * heightFactor;
    const lateral = -crosswind * 0.008 * heightFactor;

    return {
        distance: Math.round((Math.abs(distance) < 1e-10 ? 0 : distance) * 1000) / 1000,
        lateral: Math.round((Math.abs(lateral) < 1e-10 ? 0 : lateral) * 1000) / 1000
    };
}

/**
 * Calculate effective wind speed at altitude
 * @param {number} windSpeed - Wind speed in mph
 * @param {number} altitude - Altitude in feet
 * @returns {number} Effective wind speed
 */
export function calculateEffectiveWindSpeed(windSpeed, altitude) {
    const speed = Number(windSpeed);
    const alt = Number(altitude) || 0;

    if (isNaN(speed)) {
        return 0;
    }

    const altitudeFactor = 1 + (Math.min(20000, Math.max(0, alt)) / 66667);
    const effectiveSpeed = Math.abs(speed) * altitudeFactor;

    return Math.round(effectiveSpeed * 100) / 100;
}

// ==========================================
// air-density-calculations.js
// Description: Air density and environmental calculations
// ==========================================

/**
 * Calculate air density based on temperature and pressure
 * @param {number} temperature - Temperature in Fahrenheit
 * @param {number} pressure - Pressure in inHg
 * @returns {number} Air density in kg/m^3
 */
export function calculateAirDensity(temperature, pressure) {
    if (typeof temperature !== 'number' || isNaN(temperature)) {
        throw new Error('Temperature must be a valid number');
    }
    if (typeof pressure !== 'number' || isNaN(pressure)) {
        throw new Error('Pressure must be a valid number');
    }

    // Convert temperature to Kelvin
    const tempK = (temperature + 459.67) * 5/9;

    // Calculate air density using the ideal gas law
    const density = (pressure * 0.0338639) / (tempK * 0.287042);
    return Math.round(density * 1000) / 1000;
}

/**
 * Calculate dew point based on temperature and humidity
 * @param {number} temperature - Temperature in Fahrenheit
 * @param {number} humidity - Relative humidity in percentage
 * @returns {number} Dew point in Fahrenheit
 */
export function calculateDewPoint(temperature, humidity) {
    if (typeof temperature !== 'number' || isNaN(temperature)) {
        throw new Error('Temperature must be a valid number');
    }
    if (typeof humidity !== 'number' || isNaN(humidity) || humidity < 0 || humidity > 100) {
        throw new Error('Humidity must be a valid percentage between 0 and 100');
    }

    const a = 17.27;
    const b = 237.7;
    const alpha = ((a * temperature) / (b + temperature)) + Math.log(humidity/100);
    const dewPoint = (b * alpha) / (a - alpha);

    return Math.round(dewPoint * 100) / 100;
}

// ==========================================
// ball-physics.js
// Description: Ball flight physics modeling
// ==========================================

/**
 * Calculate total ball flight adjustments
 * @param {Object} conditions - Weather conditions
 * @param {Object} ballData - Ball flight data
 * @param {Object} clubData - Club-specific data
 * @returns {Object} Adjusted ball flight parameters
 */
export function calculateBallFlightAdjustments(conditions, ballData, clubData) {
    const { temp, humidity, airDensity } = conditions;
    const { initialSpin, flightTime } = ballData;
    
    // Calculate environmental effects
    const dewPoint = calculateDewPoint(temp, humidity);
    const dewPointEffects = calculateDewPointEffect(dewPoint, temp);
    
    // Calculate trajectory characteristics
    const trajectoryData = calculateTrajectoryShape(clubData, airDensity);
    
    // Calculate spin decay using club-specific characteristics
    const finalSpin = initialSpin * Math.exp(-trajectoryData.spinDecayRate * flightTime);
    
    // Calculate carry adjustment based on trajectory shape
    const trajectoryFactor = 1 + (1 - trajectoryData.trajectoryShape) * 0.05;
    
    return {
        finalSpin,
        spinFactor: dewPointEffects.spinFactor,
        carryFactor: dewPointEffects.carryFactor * trajectoryFactor,
        trajectoryData,
        totalFactor: dewPointEffects.carryFactor * trajectoryFactor
    };
}

/**
 * Calculate ball compression factor
 * @param {number} temperature - Temperature in Fahrenheit
 * @returns {number} Ball compression factor
 */
export function calculateBallCompression(temperature) {
    const baseCompression = 0.95;
    
    // Non-linear temperature effect (more pronounced at extremes)
    const tempDiff = temperature - 70;
    const tempEffect = Math.sign(tempDiff) * Math.pow(Math.abs(tempDiff) / 50, 1.2) * 0.05;
    
    // Calculate total compression factor with limits
    const totalCompression = baseCompression + tempEffect;
    return Math.max(0.85, Math.min(1.0, totalCompression));
}

// ==========================================
// club-data.js
// Description: Club performance data and constants
// ==========================================

export const PGA_CLUB_DATA = {
    driver: {
        ballSpeed: 171.5,    // mph
        spinRate: 2545,      // rpm
        launchAngle: 10.4,   // degrees
        apexHeight: 102,     // feet
        landingAngle: 37.8,  // degrees
        carryDistance: 282.0 // yards
    },
    threewood: {
        ballSpeed: 158.7,
        spinRate: 3663,
        launchAngle: 9.3,
        apexHeight: 92,
        landingAngle: 42.1,
        carryDistance: 249.0
    },
    // ... other clubs ...
};

// ==========================================
// validation.js
// Description: Input validation utilities
// ==========================================

export function validateNumeric(value, options = {}) {
    const {
        min = -Infinity,
        max = Infinity,
        required = true,
        name = 'Value'
    } = options;
    
    if (required && (value === null || value === undefined || value === '')) {
        return {
            valid: false,
            error: `${name} is required`
        };
    }
    
    const num = Number(value);
    
    if (isNaN(num)) {
        return {
            valid: false,
            error: `${name} must be a number`
        };
    }
    
    if (num < min) {
        return {
            valid: false,
            error: `${name} must be at least ${min}`
        };
    }
    
    if (num > max) {
        return {
            valid: false,
            error: `${name} must be at most ${max}`
        };
    }
    
    return { valid: true };
}

// ==========================================
// weather-api.js
// Description: Weather API integration
// ==========================================

export async function fetchWeatherData(location) {
    try {
        const response = await fetch(`${API_BASE_URL}/weather/realtime`, {
            params: {
                location: location,
                fields: [
                    'temperature',
                    'humidity',
                    'windSpeed',
                    'windDirection',
                    'pressure',
                    'altitude'
                ],
                units: 'imperial',
                timesteps: 'current',
                apikey: API_KEY
            }
        });

        const weatherData = response.data;
        return {
            temperature: weatherData.temperature,
            humidity: weatherData.humidity,
            windSpeed: weatherData.windSpeed,
            windDirection: weatherData.windDirection,
            pressure: weatherData.pressure,
            altitude: weatherData.altitude
        };
    } catch (error) {
        console.error('Error fetching weather data:', error);
        throw error;
    }
}
